死锁的产生必须具备四个条件：
1.互斥条件：
  线程对已经获取到的资源进行排他性使用，即该资源同时只由一个线程占用，
  如果此时还有其他线程请求获取该资源，则请求者只能等待，直到占有资源的线程释放该资源。
2.请求并持有条件：
  一个线程已经持有了至少一个资源，但又提出了新的资源请求，而新资源已被其他线程占用，
  所以当前线程会被阻塞，但阻塞的同时并不会释放自己已经获取的资源。

  （我有一个问题：
  是因为阻塞的时候，线程不会运行任何代码，且消耗最少的资源，所以
  “阻塞时不会释放自己已经获取/占用的资源”吗？  还是两个没有关系？）

3.不可剥夺条件：
  线程获取到的资源在自己使用完之前不能被其他线程抢占，
  只有自己使用完毕后才由自己释放该资源。
4.环路等待条件：
  在发生死锁时，必然存在一个线程——资源的环形链，即线程集合{T0,T1,T2,...,Tn}
  中的T0正在等待一个T1占用的资源；
  T1正在等待T2占用的资源，......
  Tn正在等待T0占用的资源。



  //用我的话来说：
          1.任何时刻，这个资源只能有一个线程访问。
          2.它要等别人的。
          3.别人要等它的。
          4.形成了等待环路。

如何避免线程死锁
只需要破坏掉至少一个构成死锁的必要条件即可。
目前只有请求并持有 和 环路等待条件 是可以被破坏的。
造成死锁的原因其实和申请资源的顺序有很大关系，
使用资源申请的有序性原则就可以避免死锁。